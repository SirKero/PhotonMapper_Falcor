from falcor import *

def render_graph_NonPtGbuffer():
    g = RenderGraph('NonPtGbuffer')
    loadRenderPassLibrary('PhotonMapper.dll')
    loadRenderPassLibrary('ErrorMeasurePass.dll')
    loadRenderPassLibrary('Utils.dll')
    loadRenderPassLibrary('CSM.dll')
    loadRenderPassLibrary('BSDFViewer.dll')
    loadRenderPassLibrary('MinimalPathTracer.dll')
    loadRenderPassLibrary('AccumulatePass.dll')
    loadRenderPassLibrary('Antialiasing.dll')
    loadRenderPassLibrary('BlitPass.dll')
    loadRenderPassLibrary('DebugPasses.dll')
    loadRenderPassLibrary('SimplePostFX.dll')
    loadRenderPassLibrary('ForwardLightingPass.dll')
    loadRenderPassLibrary('DepthPass.dll')
    loadRenderPassLibrary('ExampleBlitPass.dll')
    loadRenderPassLibrary('FLIPPass.dll')
    loadRenderPassLibrary('SVGFPass.dll')
    loadRenderPassLibrary('GBuffer.dll')
    loadRenderPassLibrary('PixelInspectorPass.dll')
    loadRenderPassLibrary('ImageLoader.dll')
    loadRenderPassLibrary('MegakernelPathTracer.dll')
    loadRenderPassLibrary('OptixDenoiser.dll')
    loadRenderPassLibrary('PassLibraryTemplate.dll')
    loadRenderPassLibrary('PTGBuffer.dll')
    loadRenderPassLibrary('SceneDebugger.dll')
    loadRenderPassLibrary('SkyBox.dll')
    loadRenderPassLibrary('SSAO.dll')
    loadRenderPassLibrary('TemporalDelayPass.dll')
    loadRenderPassLibrary('WireframePass.dll')
    loadRenderPassLibrary('TestPasses.dll')
    loadRenderPassLibrary('ToneMapper.dll')
    loadRenderPassLibrary('WhittedRayTracer.dll')
    GBufferRT = createPass('GBufferRT', {'samplePattern': SamplePattern.Center, 'sampleCount': 16, 'useAlphaTest': True, 'adjustShadingNormals': True, 'forceCullMode': False, 'cull': CullMode.CullBack, 'texLOD': TexLODMode.Mip0, 'useTraceRayInline': False})
    g.addPass(GBufferRT, 'GBufferRT')
    PhotonMapper = createPass('PhotonMapper')
    g.addPass(PhotonMapper, 'PhotonMapper')
    g.addEdge('GBufferRT.matlExtra', 'PhotonMapper.MaterialExtra')
    g.addEdge('GBufferRT.posW', 'PhotonMapper.WPos')
    g.addEdge('GBufferRT.normW', 'PhotonMapper.WNormal')
    g.addEdge('GBufferRT.tangentW', 'PhotonMapper.WTangent')
    g.addEdge('GBufferRT.texC', 'PhotonMapper.TexC')
    g.addEdge('GBufferRT.diffuseOpacity', 'PhotonMapper.DiffuseOpacity')
    g.addEdge('GBufferRT.specRough', 'PhotonMapper.SpecularRoughness')
    g.addEdge('GBufferRT.emissive', 'PhotonMapper.Emissive')
    g.addEdge('GBufferRT.viewW', 'PhotonMapper.WView')
    g.addEdge('GBufferRT.faceNormalW', 'PhotonMapper.WFaceNormal')
    return g

NonPtGbuffer = render_graph_NonPtGbuffer()
try: m.addGraph(NonPtGbuffer)
except NameError: None
