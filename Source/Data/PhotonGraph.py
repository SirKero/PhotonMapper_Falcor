from falcor import *

def render_graph_PhotonMapper():
    g = RenderGraph('PhotonMapper')
    loadRenderPassLibrary('PhotonReStir.dll')
    loadRenderPassLibrary('ErrorMeasurePass.dll')
    loadRenderPassLibrary('PhotonMapper.dll')
    loadRenderPassLibrary('BSDFViewer.dll')
    loadRenderPassLibrary('AccumulatePass.dll')
    loadRenderPassLibrary('Antialiasing.dll')
    loadRenderPassLibrary('BlitPass.dll')
    loadRenderPassLibrary('CSM.dll')
    loadRenderPassLibrary('DebugPasses.dll')
    loadRenderPassLibrary('ExampleBlitPass.dll')
    loadRenderPassLibrary('DepthPass.dll')
    loadRenderPassLibrary('FLIPPass.dll')
    loadRenderPassLibrary('ForwardLightingPass.dll')
    loadRenderPassLibrary('OptixDenoiser.dll')
    loadRenderPassLibrary('GBuffer.dll')
    loadRenderPassLibrary('ImageLoader.dll')
    loadRenderPassLibrary('WireframePass.dll')
    loadRenderPassLibrary('MegakernelPathTracer.dll')
    loadRenderPassLibrary('MinimalPathTracer.dll')
    loadRenderPassLibrary('PassLibraryTemplate.dll')
    loadRenderPassLibrary('PixelInspectorPass.dll')
    loadRenderPassLibrary('PTGBuffer.dll')
    loadRenderPassLibrary('SceneDebugger.dll')
    loadRenderPassLibrary('SimplePostFX.dll')
    loadRenderPassLibrary('SkyBox.dll')
    loadRenderPassLibrary('SSAO.dll')
    loadRenderPassLibrary('SVGFPass.dll')
    loadRenderPassLibrary('TemporalDelayPass.dll')
    loadRenderPassLibrary('TestPasses.dll')
    loadRenderPassLibrary('ToneMapper.dll')
    loadRenderPassLibrary('Utils.dll')
    loadRenderPassLibrary('WhittedRayTracer.dll')
    PTGBuffer = createPass('PTGBuffer')
    g.addPass(PTGBuffer, 'PTGBuffer')
    PhotonMapper = createPass('PhotonMapper')
    g.addPass(PhotonMapper, 'PhotonMapper')
    g.addEdge('PTGBuffer.posW', 'PhotonMapper.WPos')
    g.addEdge('PTGBuffer.normW', 'PhotonMapper.WNormal')
    g.addEdge('PTGBuffer.tangentW', 'PhotonMapper.WTangent')
    g.addEdge('PTGBuffer.texC', 'PhotonMapper.TexC')
    g.addEdge('PTGBuffer.diffuseOpacity', 'PhotonMapper.DiffuseOpacity')
    g.addEdge('PTGBuffer.specRough', 'PhotonMapper.SpecularRoughness')
    g.addEdge('PTGBuffer.emissive', 'PhotonMapper.Emissive')
    g.addEdge('PTGBuffer.matlExtra', 'PhotonMapper.MaterialExtra')
    g.addEdge('PTGBuffer.viewW', 'PhotonMapper.WView')
    g.addEdge('PTGBuffer.faceNormal', 'PhotonMapper.WFaceNormal')
    g.markOutput('PhotonMapper.PhotonImage')
    return g

PhotonMapper = render_graph_PhotonMapper()
try: m.addGraph(PhotonMapper)
except NameError: None
